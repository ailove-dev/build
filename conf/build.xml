<?xml version="1.0" encoding="UTF-8"?>

<project name="equip" default="build">
  <property name="cachedir" value="${basedir}/../cache" />
  <property name="builddir" value="${basedir}/../build" />
  <property name="repodir" value="${basedir}/../repo/master" />
  <condition property="script-suffix" value=".bat" else="">
    <os family="windows" />
  </condition>

  <target name="build"
    depends="prepare,cache-clear,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,behat,phpunit,phpcb"/>

  <target name="cache-clear" description="Clear symfony2 cache">
    <delete dir="${cachedir}"/>
    <mkdir dir="${cachedir}"/>
  </target>
    
  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${builddir}/api"/>
    <delete dir="${builddir}/code-browser"/>
    <delete dir="${builddir}/coverage"/>
    <delete dir="${builddir}/logs"/>
    <delete dir="${builddir}/pdepend"/>
  <delete dir="${builddir}/behat"/>
    <delete dir="${cachedir}/*"/>
  </target>

  <target name="prepare" depends="clean" description="Prepare for build">
    <mkdir dir="${builddir}/api"/>
    <mkdir dir="${builddir}/code-browser"/>
    <mkdir dir="${builddir}/coverage"/>
    <mkdir dir="${builddir}/logs"/>
    <mkdir dir="${builddir}/pdepend"/>
    <mkdir dir="${builddir}/phpdox"/>
  <mkdir dir="${builddir}/behat"/>
  </target>

  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
      <arg value="-l" />

      <fileset dir="${repodir}/src">
        <include name="**/*.php" />
        <modified />
      </fileset>

    </apply>
  </target>

  <target name="phploc" description="Measure project size using PHPLOC">
    <exec executable="phploc${script-suffix}">
      <arg value="--log-csv" />
      <arg value="${builddir}/logs/phploc.csv" />
      <arg path="${repodir}/src" />
    </exec>
  </target>

  <target name="pdepend" description="Calculate software metrics using PHP_Depend">
    <exec executable="pdepend${script-suffix}">
      <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
      <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
      <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
      <arg path="${repodir}/src" />
    </exec>
  </target>

  <target name="phpmd"
    description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="phpmd${script-suffix}">
      <arg path="${repodir}/src" />
      <arg value="text" />
      <arg value="${basedir}/phpmd.xml" />
    </exec>
  </target>

  <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
    <exec executable="phpmd${script-suffix}">
      <arg path="${repodir}/src" />
      <arg value="xml" />
      <arg value="${basedir}/phpmd.xml" />
      <arg value="--reportfile" />
      <arg value="${builddir}/logs/pmd.xml" />
    </exec>
  </target>

  <target name="phpcs"
    description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="phpcs${script-suffix}">
      <arg value="--standard=Symfony2" />
      <arg value="--ignore=*/Tests/*" />
      <arg path="${repodir}/src" />
    </exec>
  </target>

  <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <exec executable="phpcs${script-suffix}">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
      <arg value="--standard=Symfony2" />
       <arg value="--ignore=*/Tests/*" />
      <arg path="${repodir}/src" />
    </exec>
  </target>

  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="phpcpd${script-suffix}">
      <arg value="--log-pmd" />
      <arg value="${builddir}/logs/pmd-cpd.xml" />
      <arg path="${repodir}/src" />
   </exec>
  </target>

  <target name="phpdox" description="Generate API documentation using phpDox">
    <exec executable="phpdox${script-suffix}">
      <arg value="--file=${basedir}/phpdox.xml" />
    </exec>
  </target>

  <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
    <exec executable="phpcb${script-suffix}">
      <arg value="--log" />
      <arg path="${builddir}/logs" />
      <arg value="--source" />
      <arg path="${repodir}/src" />
      <arg value="--output" />
      <arg path="${builddir}/code-browser" />
    </exec>
  </target>

  <target name="-check-phpunit-file" unless="phpunit.exists">
    <available property="phpunit.exists" file="${repodir}/app/phpunit.xml"/>
  </target>

  <target name="phpunit" description="Run unit tests with PHPUnit" depends="-check-phpunit-file" if="${phpunit.exists}">
    <exec executable="phpunit${script-suffix}" failonerror="true">
      <arg value="-c" />
      <arg value="${repodir}/app" />
    </exec>
  </target>

  <target name="-get-pro-db">
    <sshexec host="dev2.ailove.ru"
      trust="Yes"
      username="a.pachay"
      keyfile="c:\ssh\id_rsa"
      command="sudo /srv/admin/bin/copydb-pro2dev.sh ${ant.project.name}"/>
    <antcall target="migrate"/>
  </target>

  <target name="behat" description="Run behat tests" depends="-get-pro-db">
    <exec dir="${repodir}/" executable="php" failonerror="true">
      <arg line="app/console -e=test behat -f junit --out ${builddir}/behat" />
    </exec>
  </target>

  <target name="migrate">
    <sshexec host="dev2.ailove.ru"
      trust="Yes"
      username="a.pachay"
      keyfile="c:\ssh\id_rsa"
      command="sudo /srv/admin/bin/symfony-migrate.sh ${ant.project.name}"/>
  </target>

</project>
